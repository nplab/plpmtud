<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced.
    An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC678 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0678.xml">
<!ENTITY RFC768 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC791 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0791.xml">
<!ENTITY RFC792 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0792.xml">
<!ENTITY RFC1122 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY RFC1123 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1123.xml">
<!ENTITY RFC1812 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1812.xml">
<!ENTITY RFC1191 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1191.xml">
<!ENTITY RFC1981 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1981.xml">
<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2475 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2475.xml">
<!ENTITY RFC2553 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2553.xml">
<!ENTITY RFC2923 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2923.xml">
<!ENTITY RFC3168 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3168.xml">
<!ENTITY RFC3260 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3260.xml">
<!ENTITY RFC3395 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3395.xml">
<!ENTITY RFC3396 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3396.xml">
<!ENTITY RFC3493 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3493.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC3678 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3678.xml">
<!ENTITY RFC3828 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3828.xml">
<!ENTITY RFC4340 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4340.xml">
<!ENTITY RFC4443 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4443.xml">
<!ENTITY RFC4820 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4820.xml">
<!ENTITY RFC4821 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4821.xml">
<!ENTITY RFC4828 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4828.xml">
<!ENTITY RFC4890 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4890.xml">
<!ENTITY RFC4960 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4960.xml">
<!ENTITY RFC5082 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5082.xml">
<!ENTITY RFC5097 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5097.xml">
<!ENTITY RFC5226 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5508 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5508.xml">
<!ENTITY RFC6679 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6679.xml">
<!ENTITY RFC6935 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6935.xml">
<!ENTITY RFC6936 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6936.xml">
<!ENTITY RFC6951 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6951.xml">
<!ENTITY RFC6968 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6968.xml">
<!ENTITY RFC6633 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6633.xml">
<!ENTITY RFC8085 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8085.xml">
<!ENTITY RFC8200 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8200.xml">
<!ENTITY RFC8201 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8201.xml">
<!ENTITY RFC8261 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8261.xml">
<!ENTITY RFC8174 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY I-D.ietf-quic-transport SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-quic-transport-20.xml">
<!ENTITY I-D.ietf-intarea-tunnels SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-intarea-tunnels-10.xml">
<!ENTITY I-D.ietf-intarea-frag-fragile SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-intarea-frag-fragile-17.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
    please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-ietf-tsvwg-datagram-plpmtud-13"
     ipr="trust200902" updates="4821, 4960, 8085">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
                 or pre5378Trust200902
    you can add the attributes updates="NNNN" and obsoletes="NNNN"
    they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
     full title is longer than 39 characters -->

    <title abbrev="DPLPMTUD">Packetization Layer Path MTU Discovery for Datagram Transports</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Godred Fairhurst" initials="G" surname="Fairhurst">
      <organization>University of Aberdeen</organization>

      <address>
        <postal>
          <street>School of Engineering</street>

          <street>Fraser Noble Building</street>

          <city>Aberdeen</city>

          <region></region>

          <code>AB24 3UE</code>

          <country>UK</country>
        </postal>

        <email>gorry@erg.abdn.ac.uk</email>
      </address>
    </author>

    <author fullname="Tom Jones" initials="T" surname="Jones">
      <organization>University of Aberdeen</organization>

      <address>
        <postal>
          <street>School of Engineering</street>

          <street>Fraser Noble Building</street>

          <city>Aberdeen</city>

          <region></region>

          <code>AB24 3UE</code>

          <country>UK</country>
        </postal>

        <email>tom@erg.abdn.ac.uk</email>
      </address>
    </author>

    <author fullname="Michael Tuexen" initials="M" surname="Tuexen">
      <organization>Muenster University of Applied Sciences</organization>

      <address>
        <postal>
          <street>Stegerwaldstrasse 39</street>

          <code>48565</code>

          <city>Steinfurt</city>

          <region></region>

          <country>DE</country>
        </postal>

        <email>tuexen@fh-muenster.de</email>
      </address>
    </author>

    <author fullname="Irene Ruengeler" initials="I" surname="Ruengeler">
      <organization>Muenster University of Applied Sciences</organization>

      <address>
        <postal>
          <street>Stegerwaldstrasse 39</street>

          <code>48565</code>

          <city>Steinfurt</city>

          <region></region>

          <country>DE</country>
        </postal>

        <email>i.ruengeler@fh-muenster.de</email>
      </address>
    </author>

    <author fullname="Timo Voelker" initials="T" surname="Voelker">
      <organization>Muenster University of Applied Sciences</organization>

      <address>
        <postal>
          <street>Stegerwaldstrasse 39</street>

          <code>48565</code>

          <city>Steinfurt</city>

          <region></region>

          <country>DE</country>
        </postal>

        <email>timo.voelker@fh-muenster.de</email>
      </address>
    </author>

    <date year="2020" />

    <!-- Meta-data Declarations -->

    <area>Transport</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>UDP SCTP Transport PMTUD PLPMTUD</keyword>

    <abstract>
      <t>This document describes a robust method for Path MTU Discovery
      (PMTUD) for datagram Packetization Layers (PLs). It describes an
      extension to RFC 1191 and RFC 8201, which specifies ICMP-based Path MTU
      Discovery for IPv4 and IPv6. The method allows a PL, or a datagram
      application that uses a PL, to discover whether a network path can
      support the current size of datagram. This can be used to detect and
      reduce the message size when a sender encounters a packet black hole
      (where packets are discarded). The method can probe a network path with
      progressively larger packets to discover whether the maximum packet size
      can be increased. This allows a sender to determine an appropriate
      packet size, providing functionality for datagram transports that is
      equivalent to the Packetization Layer PMTUD specification for TCP,
      specified in RFC 4821.</t>
       
       <t> The document updates RFC 4821 to specify the method for datagram PLs,
       and updates RFC 8085 as the method to use in place of RFC 4821
       with UDP datagrams. Section 7.3 of RFC4960 recommends an endpoint
       apply the techniques in RFC4821 on a per-destination-address basis.
       RFC4960 is updated to replace this with a recommendation to use the
       method specified in this document.</t>

      <t>The document also provides implementation notes for incorporating
      Datagram PMTUD into IETF datagram transports or applications that use
      datagram transports.</t>

      <t>When published, this specification updates RFC 4821 and RFC 8085.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The IETF has specified datagram transport using UDP, SCTP, and DCCP,
      as well as protocols layered on top of these transports (e.g., SCTP/UDP,
      DCCP/UDP, QUIC/UDP), and direct datagram transport over the IP network
      layer. This document describes a robust method for Path MTU Discovery
      (PMTUD) that can be used with these transport protocols (or the
      applications that use their transport service) to discover an
      appropriate size of packet to use across an Internet path.</t>

      <section anchor="Classic-PMTUD" title="Classical Path MTU Discovery">
        <t>Classical Path Maximum Transmission Unit Discovery (PMTUD) can be
        used with any transport that is able to process ICMP Packet Too Big
        (PTB) messages (e.g., <xref target="RFC1191"></xref> and <xref
        target="RFC8201"></xref>). In this document, the term PTB message is
        applied to both IPv4 ICMP Unreachable messages (type 3) that carry the
        error Fragmentation Needed (Type 3, Code 4) <xref
        target="RFC0792"></xref> and ICMPv6 Packet Too Big messages (Type 2)
        <xref target="RFC4443"></xref>. When a sender receives a PTB message,
        it reduces the effective MTU to the value reported as the Link MTU in
        the PTB message. A method from time-to-time increases the
        packet size in attempt to discover an increase in the supported PMTU.
        The packets sent with a size larger than the current effective PMTU
        are known as probe packets.</t>

        <t>Packets not intended as probe packets are either fragmented to the
        current effective PMTU, or the attempt to send fails with an error
        code. Applications can be provided with a primitive to let them
        read the Maximum Packet Size (MPS), derived from the current effective
        PMTU.</t>

        <t>Classical PMTUD is subject to protocol failures. One failure arises
        when traffic using a packet size larger than the actual PMTU is
        black-holed (all datagrams sent with this size, or larger, are
        discarded). This could arise when the PTB messages are not delivered
        back to the sender for some reason (see for example <xref
        target="RFC2923"></xref>).</t>

        <t>Examples where PTB messages are not delivered include: <list
            style="symbols">
            <t>The generation of ICMP messages is usually rate limited. This
            could result in no PTB messages being generated to the sender (see
            section 2.4 of <xref target="RFC4443"></xref>)</t>

            <t>ICMP messages can be filtered by middleboxes (including
            firewalls) <xref target="RFC4890"></xref>. A stateful firewall
            could be configured with a policy to block incoming ICMP messages,
            which would prevent reception of PTB messages to a sending
            endpoint behind this firewall.</t>

            <t>When the router issuing the ICMP message drops a tunneled
            packet, the resulting ICMP message will be directed to the tunnel
            ingress. This tunnel endpoint is responsible for forwarding the
            ICMP message and also processing the quoted packet within the
            payload field to remove the effect of the tunnel, and return a
            correctly formatted ICMP message to the sender <xref
            target="I-D.ietf-intarea-tunnels"></xref>. Failure to do this
            prevents the PTB message reaching the original sender.</t>

            <t>Asymmetry in forwarding can result in there being no return
            route to the original sender, which would prevent an ICMP message
            being delivered to the sender. This issue can also arise when
            policy-based routing is used, Equal Cost Multipath (ECMP) routing
            is used, or a middlebox acts as an application load balancer. An
            example is where the path towards the server is chosen by ECMP
            routing depending on bytes in the IP payload. In this case, when a
            packet sent by the server encounters a problem after the ECMP
            router, then any resulting ICMP message also needs to be directed
            by the ECMP router towards the original sender.</t>

            <t>There are additional cases where the next hop destination fails
            to receive a packet because of its size. This could be due to
            misconfiguration of the layer 2 path between nodes, for instance
            the MTU configured in a layer 2 switch, or misconfiguration of the
            Maximum Receive Unit (MRU). If a packet is dropped by the link,
            this will not cause a PTB message to be sent to the original
            sender.</t>
          </list></t>

        <t>Another failure could result if a node that is not on the network
        path sends a PTB message that attempts to force a sender to change the
        effective PMTU <xref target="RFC8201"></xref>. A sender can protect
        itself from reacting to such messages by utilising the quoted packet
        within a PTB message payload to validate that the received PTB message
        was generated in response to a packet that had actually originated
        from the sender. However, there are situations where a sender would be
        unable to provide this validation. Examples where validation of the
        PTB message is not possible include: <list style="symbols">
            <t>When a router issuing the ICMP message implements RFC792 <xref
            target="RFC0792"></xref>, it is only required to include the first
            64 bits of the IP payload of the packet within the quoted payload.
            There could be insufficient bytes remaining for the sender to
            interpret the quoted transport information. <vspace /> Note: The
            recommendation in RFC1812 <xref target="RFC1812"></xref> is that
            IPv4 routers return a quoted packet with as much of the original
            datagram as possible without the length of the ICMP datagram
            exceeding 576 bytes. IPv6 routers include as much of the invoking
            packet as possible without the ICMPv6 packet exceeding 1280 bytes
            <xref target="RFC4443"></xref>.</t>

            <t>The use of tunnels/encryption can reduce the size of the quoted
            packet returned to the original source address, increasing the
            risk that there could be insufficient bytes remaining for the
            sender to interpret the quoted transport information.</t>

            <t>Even when the PTB message includes sufficient bytes of the
            quoted packet, the network layer could lack sufficient context to
            validate the message, because validation depends on information
            about the active transport flows at an endpoint node (e.g., the
            socket/address pairs being used, and other protocol header
            information).</t>

            <t>When a packet is encapsulated/tunneled over an encrypted
            transport, the tunnel/encapsulation ingress might have
            insufficient context, or computational power, to reconstruct the
            transport header that would be needed to perform validation.</t>

	    <t> A Network Addres Translation (NAT) device that translates a
            packet header, ought to also translate ICMP messages and update
            the ICMP quoted packet <xref target="RFC5508"></xref> in
            that message. If this is not correctly translated
            then the sender would not be able to associate the message
            with the PL that originated the packet, and hence this
            ICMP message cannot be validated.</t>
          </list></t>
       
      </section>

      <section title="Packetization Layer Path MTU Discovery">
          <t>The term Packetization Layer (PL) has been introduced to describe
          the layer that is responsible for placing data blocks into the payload
          of IP packets and selecting an appropriate MPS. This function is often
          performed by a transport protocol (e.g., DCCP, RTP, SCTP, QUIC),
          but can also be performed by other encapsulation methods working
          above the transport layer.</t>
          
        <t>In contrast to PMTUD, Packetization Layer Path MTU Discovery
        (PLPMTUD) <xref target="RFC4821"></xref> introduced a method
        that does not rely upon reception
        and validation of PTB messages. It is therefore more robust than
        Classical PMTUD. This has become the recommended approach for
        implementing discovery of the PMTU <xref target="RFC8085"></xref>.</t>

        <t>It uses a general strategy where the PL sends probe packets to
        search for the largest size of unfragmented datagram that can be sent
        over a network path. Probe packets are sent to explore using a
        larger packet size. If a probe packet is successfully delivered (as
        determined by the PL), then the PLPMTU is raised to the size of the
        successful probe. If no response is received to a probe packet, the
        method then reduces the PLPMTU.</t>

        <t>Datagrm PLPMTUD introduces flexibility in implementation.
        At one extreme, it can be configured to only perform
        Black Hole Detection and recovery with increased robustness compared to
        Classical PMTUD. At the other extreme, all PTB processing can
        be disabled, and PLPMTUD replaces Classical PMTUD.</t>

        <t>PLPMTUD can also include additional consistency checks without
        increasing the risk that data is lost when probing to discover the
        Path MTU. For example, information available at the PL, or higher
        layers, enables received PTB messages to be validated before being
        utilized.</t>
      </section>

       <section title="Path MTU Discovery for Datagram Services">
        <t><xref target="Spec"></xref> of this document presents a set of
        algorithms for datagram protocols to discover the largest size of
        unfragmented datagram that can be sent over a network path. The method
        relies upon features of the PL described in <xref
        target="Requirements"></xref> and applies to transport protocols
        operating over IPv4 and IPv6. It does not require cooperation from the
        lower layers, although it can utilize PTB messages when these received
        messages are made available to the PL.</t>

	<t>The message size guidelines in section 3.2 of the UDP Usage
	Guidelines <xref target="RFC8085"></xref> state "an application SHOULD
	either use the Path MTU information provided by the IP layer or
	implement Path MTU Discovery (PMTUD)", but does not provide a mechanism
	for discovering the largest size of unfragmented datagram that can be
	used on a network path. The present document updates RFC 8085 to
	specify this method in place of PLPMTUD and provides a mechanism for
	sharing the discovered largest size as the Maximum Packet Size (MPS)
	(see <xref target="mps"></xref>).</t>

        <t>Section 10.2 of <xref target="RFC4821"></xref> recommended a PLPMTUD
        probing method for the Stream Control Transport Protocol (SCTP). SCTP
        utilizes probe packets consisting of a minimal sized HEARTBEAT chunk
        bundled with a PAD chunk as defined in <xref target="RFC4820"></xref>.
        However, RFC 4821 did not provide a complete specification. The present
        document replaces this by providing a complete specification.</t>

        <t>The Datagram Congestion Control Protocol (DCCP) <xref
        target="RFC4340"></xref> requires implementations to support Classical
        PMTUD and states that a DCCP sender "MUST maintain the MPS allowed for
        each active DCCP session". It also defines the current congestion
        control MPS (CCMPS) supported by a network path. This recommends use
        of PMTUD, and suggests use of control packets (DCCP-Sync) as path
        probe packets, because they do not risk application data loss. The
        method defined in this specification can be used with DCCP.</t>

        <t><xref target="protocol_specific_methods"></xref> specifies the
        method for datagram transports and provides information to enable the
        implementation of PLPMTUD with other datagram transports and
        applications that use datagram transports.</t>
      </section>
    </section>

    <section title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in BCP 14
      <xref target="RFC2119"></xref> <xref target="RFC8174"></xref> when, and
      only when, they appear in all capitals, as shown here.</t>

      <t>Other terminology is directly copied from <xref
      target="RFC4821"></xref>, and the definitions in <xref
      target="RFC1122"></xref>.</t>

      <t><dl>
          <dt>Actual PMTU:</dt>

          <dd>The Actual PMTU is the PMTU of a network path between a sender
          PL and a destination PL, which the DPLPMTUD algorithm seeks to
          determine.</dd>

          <dt>Black Hole:</dt>

          <dd>
            <t>A Black Hole is encountered when a sender is unaware that
            packets are not being delivered to the destination end point. Two
            types of Black Hole are relevant to DPLPMTUD:</t>

            <ul>
              <li>Packets encounter a packet Black Hole when packets are not
              delivered to the destination endpoint (e.g., when the sender
              transmits packets of a particular size with a previously known
              effective PMTU and they are discarded by the network).</li>
	      <li>
              An ICMP Black Hole is encountered when the sender is unaware
              that packets are not delivered to the destination endpoint
              because PTB messages are not received by the originating PL
              sender.</li>
            </ul>
          </dd>

          <dt>Black holed :</dt>

          <dd>Traffic is black-holed when the sender is unaware that packets
          are not being delivered due to a packet or ICMP Black Hole.</dd>

          <dt>Classical Path MTU Discovery:</dt>

          <dd>Classical PMTUD is a process described in <xref
          target="RFC1191" /> and <xref target="RFC8201" />, in which nodes
          rely on PTB messages to learn the largest size of unfragmented
          packet that can be used across a network path.</dd>

          <dt>Datagram:</dt>

          <dd>A datagram is a transport-layer protocol data unit, transmitted
          in the payload of an IP packet.</dd>

          <dt>Effective PMTU:</dt>

          <dd>The Effective PMTU is the current estimated value for PMTU that
          is used by a PMTUD. This is equivalent to the PLPMTU derived by
          PLPMTUD.</dd>

          <dt>EMTU_S:</dt>

          <dd>The Effective MTU for sending (EMTU_S) is defined in <xref
          target="RFC1122" /> as "the maximum IP datagram size that may be
          sent, for a particular combination of IP source and destination
          addresses...".</dd>

          <dt>EMTU_R:</dt>

          <dd>The Effective MTU for receiving (EMTU_R) is designated in <xref
          target="RFC1122" /> as the largest datagram size that can be
          reassembled by EMTU_R (Effective MTU to receive).</dd>

          <dt>Link:</dt>

          <dd>A Link is a communication facility or medium over which nodes
          can communicate at the link layer, i.e., a layer below the IP layer.
          Examples are Ethernet LANs and Internet (or higher) layer and
          tunnels.</dd>

          <dt>Link MTU:</dt>

          <dd>The Link Maximum Transmission Unit (MTU) is the size in bytes of
          the largest IP packet, including the IP header and payload, that can
          be transmitted over a link. Note that this could more properly be
          called the IP MTU, to be consistent with how other standards
          organizations use the acronym. This includes the IP header, but
          excludes link layer headers and other framing that is not part of IP
          or the IP payload. Other standards organizations generally define
          the link MTU to include the link layer headers. This specification
          continues the requirement in <xref
          target="RFC4821" />,
          that states "All links MUST enforce their MTU: links that might non-
          deterministically deliver packets that are larger than their rated
          MTU MUST consistently discard such packets."</dd>

          <dt>MAX_PMTU:</dt>

          <dd>The MAX_PMTU is the largest size of PLPMTU that DPLPMTUD will
          attempt to use.</dd>

          <dt>MPS:</dt>

          <dd>The Maximum Packet Size (MPS) is the largest size of application
          data block that can be sent across a network path by a PL. In
          DPLPMTUD this quantity is derived from the PLPMTU by taking into
          consideration the size of the lower protocol layer headers. Probe
          packets generated by DPLPMTUD can have a size larger than the
          MPS.</dd>

          <dt>MIN_PMTU:</dt>

          <dd>The MIN_PMTU is the smallest size of PLPMTU that DPLPMTUD will
          attempt to use.</dd>

          <dt>Packet:</dt>

          <dd>A Packet is the IP header plus the IP payload.</dd>

          <dt>Packetization Layer (PL):</dt>

	  <dd>The Packetization Layer (PL) is a layer of the network stack that
	  places data into packets and performs transport protocol functions.
	  Examples of a PL includes: TCP, SCTP, SCTP over DTLS or QUIC.</dd>

          <dt>Path:</dt>

          <dd>The Path is the set of links and routers traversed by a packet
          between a source node and a destination node by a particular
          flow.</dd>

          <dt>Path MTU (PMTU):</dt>

          <dd>The Path MTU (PMTU) is the minimum of the Link MTU of all the
          links forming a network path between a source node and a destination
          node.</dd>

          <dt>PTB_SIZE:</dt>

          <dd>The PTB_SIZE is a value reported in a validated PTB message that
          indicates next hop link MTU of a router along the path.</dd>

          <dt>PLPMTU:</dt>

          <dd>The Packetization Layer PMTU is an estimate of the actual PMTU
          provided by the DPLPMTUD algorithm.</dd>

          <dt>PLPMTUD:</dt>

          <dd>Packetization Layer Path MTU Discovery (PLPMTUD), the method
          described in this document for datagram PLs, which is an extension
          to Classical PMTU Discovery.</dd>

          <dt>Probe packet:</dt>

          <dd>A probe packet is a datagram sent with a purposely chosen size
          (typically the current PLPMTU or larger) to detect if packets of
          this size can be successfully sent end-to-end across the network
          path.</dd>
        </dl></t>
    </section>

    <section anchor="Requirements"
             title="Features Required to Provide Datagram PLPMTUD">
      <t>The principles expressed in <xref target="RFC4821"></xref> apply to
      the use of the technique with any PL.
      TCP PLPMTUD has been defined using standard TCP protocol mechanisms.
      Unlike TCP, datagram PLs require additional mechanisms and
      considerations to implement PLPMTUD.  </t>

      <t>The requirements for datagram PLPMTUD are: <list style="numbers">
              
          <t>PLPMTU: The PLPMTU (specified as the effective PMTU in Section 1 of
          <xref target="RFC1191"></xref>) is equivalent to the EMTU_S
          (specified in <xref target="RFC1122"></xref>). For datagram PLs,]
          the PLPMTU is managed by DPLPMTUD.
          A PL MUST NOR send a packet (other than a probe packet)
          with a size larger than the
          current PLPMTU at the network layer. </t>
          
          <t>Probe packets: On request, a DPLPMTUD sender is REQUIRED to be
          able to transmit a packet larger than the PLMPMTU. This is used to
          send a probe packet. In IPv4, a probe packet MUST be sent with the
          Don't Fragment (DF) bit set in the IP header, and without network
          layer endpoint fragmentation. In IPv6, a probe packet is always sent
          without source fragmentation (as specified in section 5.4 of <xref
          target="RFC8201"></xref>).</t>

          <t>Reception feedback: The destination PL endpoint is REQUIRED to
          provide a feedback method that indicates to the DPLPMTUD sender when
          a probe packet has been received by the destination PL endpoint. </t>

	  <t>Probe loss recovery: It is RECOMMENDED to use probe packets that
	  do not carry any user data that would require retransmission if lost.
	  Most datagram transports permit this. If a probe packet contains user
	  data requiring retransmission in case of loss, the PL (or layers
	  above) are REQUIRED to arrange any retransmission/repair of any
	  resulting loss. The PL is REQUIRED to be robust in the case where
	  probe packets are lost due to other reasons (including link
	  transmission error, congestion).</t>

          <t>PMTU parameters: A DPLPMTUD sender is RECOMMENDED to utilise
          information about the maximum size of packet that can be transmitted
          by the sender on the local link (e.g., the local Link MTU).
          It MAY utilize
          similar information about the receiver when this is supplied (note
          this could be less than EMTU_R). This avoids implementations trying
          to send probe packets that can not be transmitted by the local link.
          Too high of a value could reduce the efficiency of the search
          algorithm. Some applications also have a maximum transport protocol
          data unit (PDU) size, in which case there is no benefit from probing
          for a size larger than this (unless a transport allows multiplexing
          multiple applications PDUs into the same datagram).</t>

	  <t>Processing PTB messages: A DPLPMTUD sender MAY optionally utilize
	  PTB messages received from the network layer to help identify when a
	  network path does not support the current size of probe packet. Any
	  received PTB message MUST be validated before it is used to update
	  the PLPMTU discovery information <xref target="RFC8201"></xref>.
	  This validation confirms that the PTB message was sent in response to
	  a packet originating by the sender, and needs to be performed before
	  the PLPMTU discovery method reacts to the PTB message.  A PTB message
	  MUST NOT be used to increase the PLPMTU <xref
	  target="RFC8201"></xref>, but could trigger a probe to test for a larger
      PLPMTU. A PTB_SIZE greater than the currently probed
      MUST be ignored.</t>

	  <t>Probing and congestion control: 
	  The decision about when to send a probe packet does not need
      to be limited by the congestion controller. When not
      controlled by the congestion controller, the interval
	  between probe packets MUST be at least one RTT. If transmission of
      probe packets is limited by the congestion controller, this
      could result in transmission of probe packets being delayed.</t>
      
      <t> Loss of a probe
	  packet SHOULD NOT be treated as an indication of congestion
      and SHOULD NOT trigger a congestion
	  control reaction <xref target="RFC4821"></xref>, because this could
	  result in unecessary reduction of the sending rate.  </t>
      
      <t> An update to the PLPMTU (or MPS) MUST NOT modify the congestion
          window measured in bytes <xref target="RFC4821"></xref>.
          Therefore, an increase in the packet size
          does not cause an increase the data rate in bytes per second.</t>

        <t>Probing and flow control:  Flow control at the PL
         concerns the end-to-end flow of data using the PL service.
         This does not apply to DPLPMTU when probe packets use a design that
         does not carry user data to the remote application.</t>
         
	  <t>Shared PLPMTU state: The PLPMTU value MAY also be stored with the
	  corresponding entry associated with the destination in the IP
	  layer cache, and used by other PL instances. The specification of
	  PLPMTUD <xref target="RFC4821"></xref> states: "If PLPMTUD updates
	  the MTU for a particular path, all Packetization Layer sessions that
	  share the path representation (as described in Section 5.2 of <xref
	  target="RFC4821"></xref>) SHOULD be notified to make use of the new
	  MTU". Such methods MUST be robust to the wide variety of underlying
	  network forwarding behaviors. Section 5.2 of <xref
	  target="RFC8201"></xref> provides guidance on the caching of PMTU
	  information and also the relation to IPv6 flow labels.</t>
        </list></t>

      <t>In addition, the following principles are stated for design of a
      DPLPMTUD method: <list style="symbols">
          <t>Maximum Packet Size (MPS): A PL MAY be designed to
          segment data blocks larger than the MPS into multiple datagrams.
          However, not all datagram PLs support
          segmentation of data blocks. It is RECOMMENDED that methods avoid forcing
          an application to use an arbitrary small MPS for
          transmission while the method is searching for the currently
          supported PLPMTU. A reduced MPS can adversely impact
          the performance of an application.</t>
          
          <t> To assist applications in choosing a suitable data block size, the
          PL is RECOMMENDED to provide a primitive that
          returns the MPS derived from the PLPMTU to the
          higher layer using the PL. The value of the MPS can change following
          a change in the path, or loss of probe packets. </t>

          <t>Path validation: It is RECOMMENDED that methods are robust to
          path changes that could have occurred since the path characteristics
          were last confirmed, and to the possibility of inconsistent path
          information being received.</t>

          <t>Datagram reordering: A method is REQUIRED to be robust to the
          possibility that a flow encounters reordering, or the traffic
          (including probe packets) is divided over more than one network
          path.</t>
          
          <t>Datagram delay and duplication: The feedback
          mechanism is REQUIRED to be robust to the possibility that packets
          could be significantly delayed or duplicated along a network path.</t>

          <t>When to probe: It is RECOMMENDED that methods determine whether
          the path has changed since it last measured the path. This can help
          determine when to probe the path again.</t>
        </list></t>
    </section>

    <section title="DPLPMTUD Mechanisms">
      <t>This section lists the protocol mechanisms used in this
      specification.</t>

      <section anchor="Probe" title="PLPMTU Probe Packets">
	<t>The DPLPMTUD method relies upon the PL sender being able to generate
	probe packets with a specific size. TCP is able to generate these probe
	packets by choosing to appropriately segment data being sent <xref
	target="RFC4821"></xref>. In contrast, a datagram PL that
	constructs a probe packet has to either request an application to send a
	data block that is larger than that generated by an application, or to
	utilize padding functions to extend a datagram beyond the size of the
	application data block. Protocols that permit exchange of control
	messages (without an application data block) can generate a
	probe packet by extending a control message with padding data.</t>

	<t>A receiver is REQUIRED to be able to distinguish an in-band data
	block from any added padding. This is needed to ensure that any added
	padding is not passed on to an application at the receiver.</t>

        <t>This results in three possible ways that a sender can create a
        probe packet: <dl>
            <dt>Probing using padding data:</dt>

            <dd>A probe packet that contains only control information together
            with any padding, which is needed to be inflated to the size
            of the probe packet. Since these probe packets do not
            carry an application-supplied data block, they do not typically
            require retransmission, although they do still consume network
            capacity and incur endpoint processing.</dd>

            <dt>Probing using application data and padding data:</dt>

            <dd>A probe packet that contains a data block supplied by an
            application that is combined with padding to inflate the length of
            the datagram to the size of the probe packet. If the
            application/transport needs protection from the loss of this probe
            packet, the application/transport could perform transport-layer
            retransmission/repair of the data block (e.g., by retransmission
            after loss is detected or by duplicating the data block in a
            datagram without the padding data).</dd>

            <dt>Probing using application data:</dt>

            <dd>A probe packet that contains a data block supplied by an
            application that matches the size of the probe packet.
            This method requests the application to issue a data block of the
            desired probe size. If the application/transport needs protection
            from the loss of an unsuccessful probe packet, the
            application/transport needs then to perform transport-layer
            retransmission/repair of the data block (e.g., by retransmission
            after loss is detected).</dd>
          </dl> </t>
	<t>A PL that uses a probe packet carrying an application data
        block, could need to retransmit this application data block if the
        probe fails, possibly using a smaller PLPMTU.
	    This could need the PL to to use a
        smaller packet size to traverse the end-to-end path
        (which could utilize endpoint network-layer or a PL that can re-segment
        the data block into multiple datagrams).</t>

        <t>DPLPMTUD MAY choose to use only one of these methods to simplify
        the implementation.</t>

        <t>Probe messages sent by a PL MUST contain enough information to
        uniquely identify the probe within Maximum Segment Lifetime, while
        being robust to reordering and replay of probe response and PTB
        messages.</t>
      </section>

      <section anchor="Valid" title="Confirmation of Probed Packet Size">
        <t>The PL needs a method to determine (confirm) when probe packets
        have been successfully received end-to-end across a network path.</t>

        <t>Transport protocols can include end-to-end methods that detect and
        report reception of specific datagrams that they send (e.g., DCCP and
        SCTP provide keep-alive/heartbeat features). When supported, this
        mechanism MAY also be used by DPLPMTUD to acknowledge reception of
        a probe packet.</t>

        <t>A PL that does not acknowledge data reception (e.g., UDP and
        UDP-Lite) is unable itself to detect when the packets that it sends
        are discarded because their size is greater than the actual PMTU.
        These PLs need to rely on an application protocol to detect
        this loss.</t>

        <t><xref target="protocol_specific_methods"></xref> specifies this
        function for a set of IETF-specified protocols.</t>
      </section>
      

      <section anchor="mechanism-bhd"
               title="Black Hole Detection">
        <t>Black Hole Detection is
        triggered by an indication that the network path could be unable to
        support the current PLPMTU size. </t>

        <t>There are three ways to detect black holes:</t>

        <t><list style="symbols">
	<t>A validated PTB message can be received that indicates a PTB_SIZE
	less than the current PLPMTU. A DPLPMTUD method MUST NOT rely soley on
	this method.</t>

	 <t>A PL can use the DPLPMTUD probing mechanism to periodically
            generate probe packets of the size of the current PLPMTU (e.g.,
            using the confirmation timer <xref target="Timers"></xref>). A
            timer tracks whether acknowledgments are received. Successive loss
            of probes is an indication that the current path no longer
            supports the PLPMTU (e.g., when the number of probe packets sent
            without receiving an acknowledgement, PROBE_COUNT, becomes greater
            than MAX_PROBES).</t>

            <t>A PL can utilise an event that indicates the network path no longer
            sustains the sender's PLPMTU size. This could use a mechanism
            implemented within the PL to
            detect excessive loss of data sent with a specific packet size and
            then conclude that this excessive loss could be a result of an
            invalid PLPMTU (as in PLPMTUD for TCP <xref
            target="RFC4821"></xref>).</t>

          </list></t>

        <t>A PL MAY inhibit sending probe packets when no application data has
        been sent since the previous probe packet. A PL preferring to use an
        up-to-data PLPMTU once user data is sent again, MAY choose to continue
        PLPMTU discovery for each path. However, this could result in additional
        packets being sent.</t>

        <t>When the method detects the current PLPMTU is not supported,
        DPLPMTUD sets a lower PLPMTU, and sets a lower MPS.
        The PL then confirms that the new
        PLPMTU can be successfully used across the path. The size of
        the probe packet may need to be less than the size of the data block
        generated by the application. </t>
        
      </section>
    
    <section anchor="mps" title="The Maximum Packet Size (MPS)">

	<t>The result of probing determines a usable PLPMTU that is used to set
	the MPS used by the application.  The MPS is smaller than the PLPMTU
	because of the presence of PL headers and any IP options or extensions
	added to the PL packet.  The relationship between the MPS and the
	PLPMTUD is illustrated in <xref target="fig-mps-relationship"></xref>.
	</t>
                  
                  <t><figure anchor="fig-mps-relationship"
                      title="Relationships between MPS and PLPMTU ">
                      <artset>
                        <artwork src="diagrams/mps-relationship.svg"
                                 type="svg" />

                        <artwork src="diagrams/mps-relationship.txt"
                                 type="ascii-art" />
                      </artset>
                    </figure></t>
                  
	<t>A PL is unable to send a packet (other than a probe packet) with a
	size larger than the curent PLPMTU at the network layer. To avoid this,
	a PL MAY be designed to segment data blocks larger than the MPS into
	multiple datagrams.</t>
        
	<t> DPLPMTUD seeks to avoid IP fragmentation. An attempt to send a data
	block larger than the MPS will therefore fail if a PL is unable to
	segment data.  To determine the largest data block that can be sent, a
	PL SHOULD provide applications with a primitive that returns the
	Maximum Packet Size (MPS), derived from the current PLPMTU.</t>
                      
	<t> If DPLPMTUD results in a change to the MPS, the application needs
	to adapt to the new MPS. A particular case can arise when packets have
	been sent with a size less than the MPS and the PLPMTU was subsequently
	reduced.  If these packets are lost, the PL MAY segment the data using
	the new MPS. If a PL is unable to re-segment a previously sent datagram
	(e.g., <xref target="RFC4960"></xref> ), then the sender either
	discards the datagram or could perform retransmission using
	network-layer fragmentation to form multiple IP packets not larger than
	the PLPMTU.  For IPv4, the use of endpoint fragmentation by the sender
	is preferred over clearing the DF-bit in the IPv4 header.  Operational
	experience reveals that IP fragmentation can reduce the reliability of
	Internet communication <xref
	target="I-D.ietf-intarea-frag-fragile"></xref>, which may reduce the
	success of retransmission </t>
         </section>

        <section anchor="outgoingpmtu" title="Disabling the Effect of PMTUD">
	  <t>A PL implementing this specification MUST suspend network layer
	  processing of outgoing packets that enforces a PMTU <xref
	  target="RFC1191"></xref><xref target="RFC8201"></xref> for each flow
	  utilising DPLPMTUD, and instead use DPLPMTUD to control the size of
	  packets that are sent by a flow. This removes the need for the
	  network layer to drop or fragment sent packets that have a size
	  greater than the PMTU.</t>
        </section>

      <section anchor="mechanism-ptb" title="Response to PTB Messages">
        <t>This method requires the DPLPMTUD sender to validate any received
        PTB message before using the PTB information. The response to a PTB
        message depends on the PTB_SIZE indicated in the PTB message, the
        state of the PLPMTUD state machine, and the IP protocol being
        used.</t>

        <t><xref target="PTB"></xref> first describes validation for both IPv4
        ICMP Unreachable messages (type 3) and ICMPv6 Packet Too Big messages,
        both of which are referred to as PTB messages in this document.</t>

        <section anchor="PTB" title="Validation of PTB Messages">
          <t>This section specifies utilization of PTB messages.</t>

          <t><list style="symbols">
              <t>A simple implementation MAY ignore received PTB messages and
              in this case the PLPMTU is not updated when a PTB message is
              received.</t>

              <t>An implementation that supports PTB messages MUST validate
              messages before they are further processed.</t>
            </list></t>

          <t>A PL that receives a PTB message from a router or middlebox,
          performs ICMP validation as specified in Section 5.2 of <xref
          target="RFC8085"></xref><xref target="RFC8201"></xref>. Because
          DPLPMTUD operates at the PL, the PL needs to check that each
          received PTB message is received in response to a packet transmitted
          by the endpoint PL performing DPLPMTUD.</t>

          <t>The PL MUST check the protocol information in the quoted packet
          carried in an ICMP PTB message payload to validate the message
          originated from the sending node. This validation includes
          determining that the combination of the IP addresses, the protocol,
          the source port and destination port match those returned in the
          quoted packet - this is also necessary for the PTB message to be
          passed to the corresponding PL.</t>

          <t>The validation SHOULD utilize information that it is not simple
          for an off-path attacker to determine <xref
          target="RFC8085"></xref>. For example, by checking the value of a
          protocol header field known only to the two PL endpoints. A datagram
          application that uses well-known source and destination ports ought
          to also rely on other information to complete this validation.</t>

          <t>These checks are intended to provide protection from packets that
          originate from a node that is not on the network path. A PTB message
          that does not complete the validation MUST NOT be further utilized
          by the DPLPMTUD method.</t>

          <t>PTB messages that have been validated MAY be utilized by the
          DPLPMTUD algorithm, but MUST NOT be used directly to set the PLPMTU.
          A method that utilizes these PTB messages can improve the speed at
          the which the algorithm detects an appropriate PLPMTU by triggering
          an immediate probe for the PTB_SIZE, compared to
          one that relies solely on probing using a timer-based
          search algorithm. <xref
          target="validPTB_SIZE"></xref> describes this processing.</t>
        </section>

        <section anchor="validPTB_SIZE" title="Use of PTB Messages">
          <t>A set of checks are intended to provide protection from a router
          that reports an unexpected PTB_SIZE. The PL also needs to check that
          the indicated PTB_SIZE is less than the size used by probe packets
          and at least than minimum size accepted.</t>

          <t>This section provides a summary of how PTB messages can be
          utilized. This processing depends on the PTB_SIZE and the current
          value of a set of variables:</t>

          <t><dl newline="true">
              <dt>PTB_SIZE &lt; MIN_PMTU</dt>

              <dd>
                <ul>
                  <li>Invalid PTB_SIZE see <xref target="PTB"></xref>.</li>

                  <li>PTB message ought to be discarded without further
                  processing (e. g. PLPMTU not modified).</li>

                  <li>The information could be utilized as an input to trigger
                  enabling a resilience mode.</li>
                </ul>
              </dd>
              <dt>MIN_PMTU &lt; PTB_SIZE &lt; BASE_PMTU</dt>

              <dd>
                <ul>
		  <li>A robust PL MAY enter an error state (see <xref
		  target="States" />) for an IPv4 path when the PTB_SIZE
		  reported in the PTB message is larger than or equal to 68
		  bytes <xref target="RFC0791"></xref> and when this is less
		  than the BASE_PMTU.</li>

		  <li>A robust PL MAY enter an error state (see <xref
		  target="States" />) for an IPv6 path when the PTB_SIZE
		  reported in the PTB message is larger than or equal to 1280
		  bytes <xref target="RFC8200"></xref> and when this is less
		  than the BASE_PMTU.</li>
                </ul>
              </dd>

              <dt>PTB_SIZE = PLPMTU</dt>

              <dd>
                <ul>
                  <li>Completes the search for a larger PLPMTU.</li>
                </ul>
              </dd>

              <dt>PTB_SIZE &gt; PROBED_SIZE</dt>

              <dd>
                <ul>
                  <li>Inconsistent network signal.</li>

                  <li>PTB message ought to be discarded without further
                  processing (e. g. PLPMTU not modified).</li>

                  <li>The information could be utilized as an input to trigger
                  enabling a resilience mode.</li>
                </ul>
              </dd>

              <dt>BASE_PMTU &lt;= PTB_SIZE &lt; PLPMTU</dt>

              <dd>
                <ul>
                  <li>Black Hole Detection is triggered. When a black hole is
                  detected, the PLPMTU ought to be set to BASE_PMTU.</li>

                  <li>The PL could use the PTB_SIZE reported in the PTB
                  message to initialize a search algorithm.</li>
                </ul>
              </dd>

              <dt>PLPMTU &lt; PTB_SIZE &lt; PROBED_SIZE</dt>

              <dd>
                <ul>
                  <li>The PLPMTU continues to be valid, but the last
                  PROBED_SIZE searched was larger than the actual PMTU.</li>

                  <li>The PLPMTU is not updated.</li>

                  <li>The PL can use the reported PTB_SIZE from the PTB
                  message as the next search point when it resumes the search
                  algorithm.</li>
                </ul>
              </dd>
            </dl></t>
        </section>
      </section>
    </section>

    <section anchor="Spec" title="Datagram Packetization Layer PMTUD">
      <t>This section specifies Datagram PLPMTUD (DPLPMTUD). The method can be
      introduced at various points (as indicated with * in the figure below)
      in the IP protocol stack to discover the PLPMTU so that an application
      can utilize an appropriate MPS for the current network path. </t>

      <t>DPLPMTUD SHOULD NOT be used by an upper PL or application if it is
      already used in a lower layer, DPLPMTUD SHOULD only be performed once
      between a pair of endpoints. A PL MUST adjust the MPS indicated
      by DPLPMTUD to account for any additional overhead introduced by the
      PL.</t>

      <t><figure anchor="fig-plpmtudimplement"
          title="Examples where DPLPMTUD can be implemented">
          <artset>
            <artwork src="diagrams/dplpmtud-impl-examples.svg" type="svg" />

            <artwork src="diagrams/dplpmtud-impl-examples.txt"
                     type="ascii-art" />
          </artset>
        </figure></t>

      <t>The central idea of DPLPMTUD is probing by a sender. Probe packets
      are sent to find the maximum size of user message that can be
      completely transferred across the network path from the sender to the
      destination.</t>

      <t>The following sections identify the components needed for
      implementation, provides an overview of the phases of operation, and
      specifies the state machine and search algorithm.</t>

      <section anchor="dplpmtud-components" title="DPLPMTUD Components">
        <t>This section describes the timers, constants, and variables of
        DPLPMTUD.</t>

        <section anchor="Timers" title="Timers">
          <t>The method utilizes up to three timers: <dl>
              <dt>PROBE_TIMER:</dt>

              <dd>
                <t>The PROBE_TIMER is configured to expire after a period
                longer than the maximum time to receive an acknowledgment to a
                probe packet. This value MUST NOT be smaller than 1 second,
                and SHOULD be larger than 15 seconds. Guidance on selection of
                the timer value are provided in section 3.1.1 of the UDP Usage
                Guidelines <xref target="RFC8085" />.</t>

              </dd>

              <dt>PMTU_RAISE_TIMER:</dt>

              <dd>
		<t>The PMTU_RAISE_TIMER is configured to the period a sender
		will continue to use the current PLPMTU, after which it
		re-enters the Search phase. This timer has a period of 600
		seconds, as recommended by PLPMTUD <xref target="RFC4821"/>.</t>

                <t>DPLPMTUD MAY inhibit sending probe packets when no
                application data has been sent since the previous probe
                packet. A PL preferring to use an up-to-data PMTU once user
                data is sent again, can choose to continue PMTU discovery for
                each path. However, this could result in sending additional
                packets.</t>
              </dd>

              <dt>CONFIRMATION_TIMER:</dt>

              <dd>
                <t>When an acknowledged PL is used, this timer MUST NOT be
                used. For other PLs, the CONFIRMATION_TIMER is configured to
                the period a PL sender waits before confirming the current
                PLPMTU is still supported. This is less than the
                PMTU_RAISE_TIMER and used to decrease the PLPMTU (e.g., when a
                black hole is encountered). Confirmation needs to be frequent
                enough when data is flowing that the sending PL does not black
                hole extensive amounts of traffic. Guidance on selection of
                the timer value are provided in section 3.1.1 of the UDP Usage
                Guidelines <xref target="RFC8085" />.</t>

                <t>DPLPMTUD MAY inhibit sending probe packets when no
                application data has been sent since the previous probe
                packet. A PL preferring to use an up-to-data PMTU once user
                data is sent again, can choose to continue PMTU discovery for
                each path. However, this could result in sending additional
                packets.</t>
              </dd>
            </dl></t>

          <t>An implementation could implement the various timers using a
          single timer.</t>
        </section>

        <section title="Constants">
          <t>The following constants are defined: <dl>
              <dt>MAX_PROBES:</dt>

	      <dd>The MAX_PROBES is the maximum value of the PROBE_COUNT
	      counter (see <xref target="Variables" />). MAX_PROBES represents
	      the limit for the number of consecutive probe attempts of any
	      size. The default value of MAX_PROBES is 3. This value is greater
	      than 1 to provide robustness to isolated packet loss.</dd>

              <dt>MIN_PMTU:</dt>

              <dd>The MIN_PMTU is the smallest allowed probe packet size. For
              IPv6, this value is 1280 bytes, as specified in <xref
              target="RFC8200" />. For IPv4, the minimum value is 68
              bytes.<vspace />Note: An IPv4 router is required to be able to
              forward a datagram of 68 bytes without further fragmentation.
              This is the combined size of an IPv4 header and the minimum
              fragment size of 8 bytes. In addition, receivers are required to
              be able to reassemble fragmented datagrams at least up to 576
              bytes, as stated in section 3.3.3 of <xref
              target="RFC1122" />.</dd>

              <dt>MAX_PMTU:</dt>

              <dd>The MAX_PMTU is the largest size of PLPMTU. This has to be
              less than or equal to the minimum of the local MTU of the
              outgoing interface and the destination PMTU for receiving. An
              application, or PL, MAY choose a smaller MAX_PMTU when there is no
              need to send packets larger than a specific size.</dd>

              <dt>BASE_PMTU:</dt>

              <dd>The BASE_PMTU is a configured size expected to work for most
              paths. The size is equal to or larger than the MIN_PMTU and
              smaller than the MAX_PMTU. In the case of IPv6, this value is
              1280 bytes <xref target="RFC8200" />. When using IPv4, a size of
              1200 bytes is RECOMMENDED.</dd>
            </dl></t>
        </section>

        <section anchor="Variables" title="Variables">
          <t>This method utilizes a set of variables: <dl>
              <dt>PROBED_SIZE:</dt>

              <dd>The PROBED_SIZE is the size of the current probe packet.
              This is a tentative value for the PLPMTU, which is awaiting
              confirmation by an acknowledgment.</dd>

              <dt>PROBE_COUNT:</dt>

	      <dd>The PROBE_COUNT is a count of the number of successive
	      unsuccessful probe packets that have been sent. Each time a probe
	      packet is acknowledged, the value is set to zero. (Some probe loss is
          expected while searching, therefore loss of a single probe is not
          an indication a PMTU problem.) </dd>
            </dl></t>

          <t>The figure below illustrates the relationship between the packet
          size constants and variables at a point of time when the DPLPMTUD
          algorithm performs path probing to increase the size of the PLPMTU.
          A probe packet has been sent of size PROBED_SIZE. Once this is
          acknowledged, the PLPMTU will raise to PROBED_SIZE allowing the
          DPLPMTUD algorithm to further increase PROBED_SIZE towards the
          actual PMTU.</t>

          <t><figure anchor="fig-mps"
              title="Relationships between packet size constants and variables">
              <artset>
                <artwork src="diagrams/packet-sizes-relationships.svg"
                         type="svg" />

                <artwork src="diagrams/packet-sizes-relationships.txt"
                         type="ascii-art" />
              </artset>
            </figure></t>


        </section>

        <section anchor="phases" title="Overview of DPLPMTUD Phases">
          <t>This section provides a high-level informative view of the
          DPLPMTUD method, by describing the movement of the method through
          several phases of operation. More detail is available in the state
          machine <xref target="States"></xref>.</t>

          <t><figure anchor="fig-phases" title="DPLPMTUD Phases">
              <artset>
                <artwork src="diagrams/dplpmtud-phases.svg" type="svg" />

                <artwork src="diagrams/dplpmtud-phases.txt" type="ascii-art" />
              </artset>
            </figure></t>

          <t><dl>
              <dt>Base:</dt>

              <dd>
                <t>The Base Phase confirms connectivity to the remote peer
                using packets of the BASE_PMTU.
                This phase is implicit for a connection-oriented PL (where it
                can be performed in a PL connection handshake). A
                connectionless PL sends an acknowledged probe packet
                to confirm that the remote peer is reachable. The sender also
                confirms that BASE_PMTU is supported across the network
                path.</t>

                <t>A PL that does not wish to support a path with a PLPMTU
                less than BASE_PMTU can simplify the phase into a single step
                by performing the connectivity checks with a probe of the
                BASE_PMTU size.</t>

                <t>Once confirmed, DPLPMTUD enters the Search Phase. If this
                phase fails to confirm, DPLPMTUD enters the Error Phase.</t>
              </dd>

              <dt>Search:</dt>

              <dd>
                <t>The Search Phase utilizes a search algorithm to send probe
                packets to seek to increase the PLPMTU. The algorithm
                concludes when it has found a suitable PLPMTU, by entering the
                Search Complete Phase.</t>

                <t>A PL could respond to PTB messages using the PTB to advance
                or terminate the search, see <xref
                target="mechanism-ptb" />.</t>
              </dd>

              <dt>Search Complete:</dt>

              <dd>
                <t>The Search Complete Phase is entered when the PLPMTU is
                supported across the network path. A PL can use a
                CONFIRMATION_TIMER to periodically repeat a probe packet for
                the current PLPMTU size. If the sender is unable to confirm
                reachability (e.g., if the CONFIRMATION_TIMER expires) or the
                PL signals a lack of reachability, DPLPMTUD enters the Base
                phase.</t>

                <t>The PMTU_RAISE_TIMER is used to periodically resume the
                search phase to discover if the PLPMTU can be raised. Black
                Hole Detection causes the sender to enter the Base Phase.</t>
              </dd>

              <dt>Error:</dt>

              <dd>
                <t>The Error Phase is entered when there is conflicting or
                invalid PLPMTU information for the path (e.g. a failure to
                support the BASE_PMTU) that cause DPLPMTUD to be unable to
                progress and the PLPMTU is lowered.</t>

                <t>DPLPMTUD remains in the Error Phase until a consistent view
                of the path can be discovered and it has also been confirmed
                that the path supports the BASE_PMTU (or DPLPMTUD is
                suspended).</t>
              </dd>
            </dl></t>

          <t>An implementation that only reduces the PLPMTU to a suitable size
          would be sufficient to ensure reliable operation, but can be very
          inefficient when the actual PMTU changes or when the method (for
          whatever reason) makes a suboptimal choice for the PLPMTU.</t>

          <t>A full implementation of DPLPMTUD provides an algorithm enabling
          the DPLPMTUD sender to increase the PLPMTU following a change in the
          characteristics of the path, such as when a link is reconfigured
          with a larger MTU, or when there is a change in the set of links
          traversed by an end-to-end flow (e.g., after a routing or path
          fail-over decision).</t>
        </section>
      </section>

      <section anchor="States" title="State Machine">
        <t>A state machine for DPLPMTUD is depicted in <xref
        target="fig-states"></xref>. If multipath or multihoming is supported,
        a state machine is needed for each path.</t>

        <figure anchor="fig-states" title="State machine for Datagram PLPMTUD">
          <preamble>Note: Not all changes are shown to simplify the
          diagram.</preamble>

          <artset>
            <artwork src="diagrams/dplpmtud-statemachine.svg" type="svg" />

            <artwork src="diagrams/dplpmtud-statemachine.txt" type="ascii-art" />
          </artset>
        </figure>

        <t></t>

        <t>The following states are defined:</t>

        <t><dl>
            <dt>DISABLED:</dt>

            <dd>The DISABLED state is the initial state before probing has
            started. It is also entered from any other state, when the PL
            indicates loss of connectivity. This state is left, once the PL
            indicates connectivity to the remote PL.</dd>

            <dt>BASE:</dt>

            <dd>
              <t>The BASE state is used to confirm that the BASE_PMTU size is
              supported by the network path and is designed to allow an
              application to continue working when there are transient
              reductions in the actual PMTU. It also seeks to avoid long
              periods where traffic is black holed while searching for a
              larger PLPMTU.</t>

              <t>On entry, the PROBED_SIZE is set to the BASE_PMTU size and
              the PROBE_COUNT is set to zero.</t>

              <t>Each time a probe packet is sent, the PROBE_TIMER is started.
              The state is exited when the probe packet is acknowledged, and
              the PL sender enters the SEARCHING state.
	      </t>

              <t>The state is also left when the PROBE_COUNT reaches
              MAX_PROBES or a received PTB message is validated. This causes
              the PL sender to enter the ERROR state.</t>
            </dd>

            <dt>SEARCHING:</dt>

            <dd>
              <t>The SEARCHING state is the main probing state. This state is
              entered when probing for the BASE_PMTU was successful.</t>

	      <t>Each time a probe packet is acknowledged, the PROBE_COUNT is
	      set to zero, the PLPMTU is set to the PROBED_SIZE and then the
	      PROBED_SIZE is increased using the search algorithm.</t>

              <t>When a probe packet is sent and not acknowledged within the
              period of the PROBE_TIMER, the PROBE_COUNT is incremented and
              a new probe packet is transmitted. </t>

	      <t> The state is exited to enter SEARCH_COMPLETE when the
	      PROBE_COUNT reaches MAX_PROBES, a validated PTB is received that
	      corresponds to the last successfully probed size
	      (PTB_SIZE = PLPMTU), or a probe of size MAX_PMTU is acknowledged
	      (PLPMTU = MAX_PMTU).</t>

	      <t> When a black hole is detected in the SEARCHING state, this causes
	      the PL sender to enter the BASE state.  </t>
            </dd>

            <dt>SEARCH_COMPLETE:</dt>

            <dd>
	      <t>The SEARCH_COMPLETE state indicates a successful end to the
	      SEARCHING state.  DPLPMTUD remains in this state until either the
	      PMTU_RAISE_TIMER expires or a black hole is detected. </t>

	      <t>When DPLPMTUD uses an unacknowledged PL and is in the
	      SEARCH_COMPLETE state, a CONFIRMATION_TIMER periodically resets
	      the PROBE_COUNT and schedules a probe packet with the size of the
	      PLPMTU. If MAX_PROBES successive PLPMTUD sized probes fail to be
	      acknowledged the method enters the BASE state.  When used with an
	      acknowledged PL (e.g., SCTP), DPLPMTUD SHOULD NOT continue to
	      generate PLPMTU probes in this state.</t>
            </dd>

            <dt>ERROR:</dt>

            <dd>
	      <t>The ERROR state represents the case where either the network
	      path is not known to support a PLPMTU of at least the BASE_PMTU
	      size or when there is contradictory information about the network
	      path that would otherwise result in excessive variation in the
	      MPS signalled to the higher layer. The state implements a method
	      to mitigate oscillation in the state-event engine. It signals a
	      conservative value of the MPS to the higher layer by the PL.  The
	      state is exited when packet probes no longer detect the error or
	      when the PL indicates that connectivity has been lost. The PL
	      sender then enters the SEARCHING state.  </t>

              <t>Implementations are permitted to enable endpoint
              fragmentation if the DPLPMTUD is unable to validate MIN_PMTU
              within PROBE_COUNT probes. If DPLPMTUD is unable to validate
              MIN_PMTU the implementation will transition to the DISABLED
              state.</t>

              <t>Note: MIN_PMTU could be identical to BASE_PMTU, simplifying the
              actions in this state.</t>
            </dd>
          </dl></t>
      </section>

      <section title="Search to Increase the PLPMTU">
        <t>This section describes the algorithms used by DPLPMTUD to search
        for a larger PLPMTU.</t>

        <section anchor="Increase" title="Probing for a larger PLPMTU">
          <t>Implementations use a search algorithm across the search range to
          determine whether a larger PLPMTU can be supported across a network
          path.</t>

          <t>The method discovers the search range by confirming the minimum
          PLPMTU and then using the probe method to select a PROBED_SIZE less
          than or equal to MAX_PMTU. MAX_PMTU is the minimum of the local MTU
          and EMTU_R (learned from the remote endpoint). The MAX_PMTU MAY be
          reduced by an application that sets a maximum to the size of
          datagrams it will send.</t>

	  <t> The PROBE_COUNT is initialized to zero when the first probe with
	  a size greater than or equal to PLPMTUD is sent.  A timer is used
      to trigger the sending of probe packets of size
	  PROBED_SIZE, larger than the PLPMTU. Each probe packet successfully
	  sent to the remote peer is confirmed by acknowledgement at the PL,
	  see <xref target="Probe"></xref>.</t>

          <t>Each time a probe packet is sent to the destination, the
          PROBE_TIMER is started. The timer is canceled when the PL receives
          acknowledgment that the probe packet has been successfully sent
          across the path <xref target="Probe"></xref>. This confirms that the
          PROBED_SIZE is supported, and the PROBED_SIZE value is then assigned
          to the PLPMTU. The search algorithm can continue to send subsequent
          probe packets of an increasing size.</t>

	  <t>If the timer expires before a probe packet is acknowledged, the
	  probe has failed to confirm the PROBED_SIZE. Each time the
	  PROBE_TIMER expires, the PROBE_COUNT is incremented, the PROBE_TIMER
	  is reinitialized, and a new probe of the same size or any other size
	  (determined by the search algorithm) can be sent.  The maximum number
	  of consecutive failed probes is configured (MAX_PROBES).  If the
	  value of the PROBE_COUNT reaches MAX_PROBES, probing will stop, and
	  the PL sender enters the SEARCH_COMPLETE state.  </t>
        </section>

        <section title="Selection of Probe Sizes">
          <t>The search algorithm determines a minimum useful gain in
          PLPMTU. It would not be constructive for a PL sender to attempt to
          probe for all sizes. This would incur unnecessary load on the path.
          Implementations SHOULD select the set of probe packet
          sizes to maximize the gain in PLPMTU from each search step.</t>

          <t>Implementations could optimize the search procedure by selecting
          step sizes from a table of common PMTU sizes. When selecting the
          appropriate next size to search, an implementer ought to also
          consider that there can be common sizes of MPS that applications
          seek to use, and their could be common sizes of MTU used within the
          network.</t>
        </section>

        <section title="Resilience to Inconsistent Path Information">
          <t>A decision to increase the PLPMTU needs to be resilient to the
          possibility that information learned about the network path is
          inconsistent. A path is inconsistent, when, for example, probe
          packets are lost due to other reasons (i.e., not packet size) or due
          to frequent path changes. Frequent path changes could occur by
          unexpected "flapping" - where some packets from a flow pass along
          one path, but other packets follow a different path with different
          properties.</t>

          <t>A PL sender is able to detect inconsistency from the sequence of
          PLPMTU probes that are acknowledged or the sequence of PTB messages that it
          receives. When inconsistent path information is detected, a PL
          sender could use an alternate search mode that clamps the offered
          MPS to a smaller value for a period of time. This avoids unnecessary
          loss of packets.</t>
        </section>
      </section>

      <section anchor="robustness" title="Robustness to Inconsistent Paths">
        <t>Some paths could be unable to sustain packets of the BASE_PMTU
        size. To be robust to these paths an implementation could implement
        the Error State. This allows fallback to a smaller than desired
        PLPMTU, rather than suffer connectivity failure. This could utilize
        methods such as endpoint IP fragmentation to enable the PL sender to
        communicate using packets smaller than the BASE_PMTU.</t>
      </section>
    </section>

    <section anchor="protocol_specific_methods"
             title="Specification of Protocol-Specific Methods">
      <t>DPLPMTUD requires protocol-specific details to be specified for each
      PL that is used.</t>

      <t>The first subsection provides guidance on how to implement the
      DPLPMTUD method as a part of an application using UDP or UDP-Lite. The
      guidance also applies to other datagram services that do not include a
      specific transport protocol (such as a tunnel encapsulation). The
      following subsections describe how DPLPMTUD can be implemented as a part
      of the transport service, allowing applications using the service to
      benefit from discovery of the PLPMTU without themselves needing to
      implement this method when using SCTP and QUIC.</t>

      <section title="Application support for DPLPMTUD with UDP or UDP-Lite">
        <t>The current specifications of UDP <xref target="RFC0768"></xref>
        and UDP-Lite <xref target="RFC3828"></xref> do not define a method in
        the RFC-series that supports PLPMTUD. In particular, the UDP transport
        does not provide the transport features needed to implement
        datagram PLPMTUD.</t>

        <t>The DPLPMTUD method can be implemented as a part of an application
        built directly or indirectly on UDP or UDP-Lite, but relies on
        higher-layer protocol features to implement the method <xref
        target="RFC8085"></xref>.</t>

	<t>Some primitives used by DPLPMTUD might not be available via the
	Datagram API (e.g., the ability to access the PLPMTU from the IP layer
	cache, or interpret received PTB messages).</t>

        <t>In addition, it is desirable that PMTU discovery is not performed
        by multiple protocol layers. An application SHOULD avoid using
        DPLPMTUD when the underlying transport system provides this
        capability. To use common method for managing the PLPMTU has benefits,
        both in the ability to share state between different processes and
        opportunities to coordinate probing.</t>

        <section anchor="UDP-REQ" title="Application Request ">
          <t>An application needs an application-layer protocol mechanism
          (such as a message acknowledgement method) that solicits a response
          from a destination endpoint. The method SHOULD allow the sender to
          check the value returned in the response to provide additional
          protection from off-path insertion of data <xref
          target="RFC8085"></xref>, suitable methods include a parameter known
          only to the two endpoints, such as a session ID or initialized
          sequence number.</t>
        </section>

        <section anchor="UDP-Probe" title="Application Response ">
          <t>An application needs an application-layer protocol mechanism to
          communicate the response from the destination endpoint. This
          response could indicate successful reception of the probe across the
          path, but could also indicate that some (or all packets) have failed
          to reach the destination.</t>
        </section>

        <section anchor="UDP-probing"
                 title="Sending Application Probe Packets">
          <t>A probe packet that could carry an application data block, but the
          successful transmission of this data is at risk when used for
          probing. Some applications might prefer to use a probe packet that
          does not carry an application data block to avoid disruption to data
          transfer.</t>
        </section>

        <section title="Initial Connectivity">
          <t>An application that does not have other higher-layer information
          confirming connectivity with the remote peer SHOULD implement a
          connectivity mechanism using acknowledged probe packets before
          entering the BASE state.</t>
        </section>

        <section title="Validating the Path ">
          <t>An application that does not have other higher-layer information
          confirming correct delivery of datagrams SHOULD implement the
          CONFIRMATION_TIMER to periodically send probe packets while in the
          SEARCH_COMPLETE state.</t>
        </section>


        <section anchor="udpopt_ptb_handling" title="Handling of PTB Messages">
          <t>An application that is able and wishes to receive PTB messages
          MUST perform ICMP validation as specified in Section 5.2 of <xref
          target="RFC8085"></xref>. This requires that the application to
          check each received PTB messages to validate it is received in
          response to transmitted traffic and that the reported PTB_SIZE is
          less than the current probed size (see <xref
          target="validPTB_SIZE"></xref>). A validated PTB message MAY be used
          as input to the DPLPMTUD algorithm, but MUST NOT be used directly to
          set the PLPMTU.</t>
        </section>
      </section>

      <section title="DPLPMTUD for SCTP">
	<t>Section 10.2 of <xref target="RFC4821"></xref> specified a
	recommended PLPMTUD probing method for SCTP and.
    Section 7.3 of <xref target="RFC4960"></xref> and recommended an endpoint
    apply the techniques in RFC4821 on a per-destination-address basis.
    The specification for DPLPMTUD continues the practice of using
    the PL to discover the PMTU, but updates,
    RFC4960 with a recommendation to use the
    method specified in this document:
    The RECOMMENDED method for generating probes is to add a chunk
    consisting only of padding to an SCTP message.  The PAD chunk defined
    in <xref target="RFC4820"></xref> SHOULD be attached to
    a minimum length HEARTBEAT (HB)
    chunk to build a probe packet. This
	enables probing without affecting the transfer of user messages and
	without being limited by congestion control or flow control. This is
	preferred to using DATA chunks (with padding as required) as path
	probes.</t>
    
    <t> Section 6.9 of <xref target="RFC4960"></xref> describes dividing the
    user messages into data chunks sent by the PL when using SCTP.
    This notes that once an SCTP message has been sent, it cannot be re-segmented.
    <xref target="RFC4960"></xref> describes the method to retransmit data chunks
    when the MPS has reduced, and the use of IP fragmentation for this case.</t>

        <section anchor="sctp_over_ip" title="SCTP/IPv4 and SCTP/IPv6">
          <section title="Initial Connectivity">
            <t>The base protocol is specified in <xref
            target="RFC4960"></xref>. This provides an acknowledged PL. A
            sender can therefore enter the BASE state as soon as connectivity
            has been confirmed. </t>
          </section>

          <section anchor="sctp_over_ip_probing"
                   title="Sending SCTP Probe Packets">
            <t>Probe packets consist of an SCTP common header followed by a
            HEARTBEAT chunk and a PAD chunk. The PAD chunk is used to control
            the length of the probe packet. The HEARTBEAT chunk is used to
            trigger the sending of a HEARTBEAT ACK chunk. The reception of the
            HEARTBEAT ACK chunk acknowledges reception of a successful
            probe. A successful probe updates the association and path
            counters, but an unsuccessful probe is discounted (assumed
            to be a result of choosing too large a PLPMTU).</t>

            <t>The HEARTBEAT chunk carries a Heartbeat Information parameter
            which includes, besides the information suggested in <xref
            target="RFC4960"></xref>, the probe size, which is the size of the
            complete datagram. The size of the PAD chunk is therefore computed
            by reducing the probing size by the IPv4 or IPv6 header size, the
            SCTP common header, the HEARTBEAT request and the PAD chunk
            header. The payload of the PAD chunk contains arbitrary data.</t>

            <t>Probing starts
            directly after the PL handshake, before data is sent. Assuming this
            behavior (i.e., the PMTU is smaller than or equal to the interface
            MTU), this process will take a few round trip time periods,
            dependent on the number of PMTU probes sent. The Heartbeat timer
            can be used to implement the PROBE_TIMER.</t>
          </section>

          <section title="Validating the Path with SCTP">
            <t>Since SCTP provides an acknowledged PL, a sender MUST NOT
            implement the CONFIRMATION_TIMER while in the SEARCH_COMPLETE
            state.</t>
          </section>

          <section anchor="sctp_over_ip_ptb_handling"
                   title="PTB Message Handling by SCTP">
            <t>Normal ICMP validation MUST be performed as specified in
            Appendix C of <xref target="RFC4960"></xref>. This requires that
            the first 8 bytes of the SCTP common header are quoted in the
            payload of the PTB message, which can be the case for ICMPv4 and
            is normally the case for ICMPv6.</t>

            <t>When a PTB message has been validated, the PTB_SIZE reported in
            the PTB message SHOULD be used with the DPLPMTUD algorithm,
            providing that the reported PTB_SIZE is less than the current
            probe size (see <xref target="mechanism-ptb"></xref>).</t>
          </section>
        </section>

        <section title="DPLPMTUD for SCTP/UDP">
          <t>The UDP encapsulation of SCTP is specified in <xref
          target="RFC6951"></xref>.</t>

          <section title="Initial Connectivity">
            <t>A sender can enter the BASE state as soon as SCTP connectivity
            has been confirmed.</t>
          </section>

          <section anchor="sctp_over_udp_probing"
                   title="Sending SCTP/UDP Probe Packets">
            <t>Packet probing can be performed as specified in <xref
            target="sctp_over_ip_probing"></xref>. The maximum payload is
            reduced by 8 bytes, which has to be considered when filling the
            PAD chunk.</t>
          </section>

          <section title="Validating the Path with SCTP/UDP ">
            <t>Since SCTP provides an acknowledged PL, a sender MUST NOT
            implement the CONFIRMATION_TIMER while in the SEARCH_COMPLETE
            state.</t>
          </section>

          <section anchor="sctp_over_udp_ptb_handling"
                   title="Handling of PTB Messages by SCTP/UDP">
            <t>ICMP validation MUST be performed for PTB messages as specified
            in Appendix C of <xref target="RFC4960"></xref>. This requires
            that the first 8 bytes of the SCTP common header are contained in
            the PTB message, which can be the case for ICMPv4 (but note the
            UDP header also consumes a part of the quoted packet header) and
            is normally the case for ICMPv6. When the validation is completed,
            the PTB_SIZE indicated in the PTB message SHOULD be used with the
            DPLPMTUD providing that the reported PTB_SIZE is less than the
            current probe size.</t>
          </section>
        </section>

        <section title="DPLPMTUD for SCTP/DTLS">
          <t>The Datagram Transport Layer Security (DTLS) encapsulation of
          SCTP is specified in <xref target="RFC8261"></xref>. This is used for
          data channels in WebRTC implementations.</t>

          <section title="Initial Connectivity">
            <t>A sender can enter the BASE state as soon as SCTP connectivity
            has been confirmed.</t>
          </section>

          <section anchor="sctp_over_dtls_probing"
                   title="Sending SCTP/DTLS Probe Packets">
            <t>Packet probing can be done, as specified in <xref
            target="sctp_over_ip_probing"></xref>.</t>
          </section>

          <section title="Validating the Path with SCTP/DTLS">
            <t>Since SCTP provides an acknowledged PL, a sender MUST NOT
            implement the CONFIRMATION_TIMER while in the SEARCH_COMPLETE
            state.</t>
          </section>

          <section anchor="sctp_over_dtls_ptb_handling"
                   title="Handling of PTB Messages by SCTP/DTLS">

	    <t><xref target="RFC4960"></xref> does not specify a way to
	    validate SCTP/DTLS ICMP message payload. This can prevent
	    processing of PTB messages at the PL.</t>
          </section>

        </section>

      </section>

      <section title="DPLPMTUD for QUIC">
        <t>QUIC <xref
        target="I-D.ietf-quic-transport"></xref> is a UDP-based transport that
        provides reception feedback. The UDP payload includes the QUIC packet
        header, protected payload, and any authentication fields. QUIC depends
        on a PMTU of at least 1280 bytes.</t>

        <t>Section 14 of <xref target="I-D.ietf-quic-transport"></xref>
        describes the path considerations when sending QUIC packets. It
        recommends the use of PADDING frames to build the probe packet. Pure
        probe-only packets are constructed with PADDING frames and PING frames
        to create a padding only packet that will elicit an acknowledgement.
        Such padding only packets enable probing without affecting the
        transfer of other QUIC frames.</t>

        <t>The recommendation for QUIC endpoints implementing DPLPMTUD is that
        a MPS is maintained for each combination of local and remote IP
        addresses <xref target="I-D.ietf-quic-transport"></xref>. If a QUIC
        endpoint determines that the PMTU between any pair of local and remote
        IP addresses has fallen below an acceptable MPS, it
        immediately ceases to send QUIC packets on the affected path. This
        could result in termination of the connection if an alternative path
        cannot be found <xref target="I-D.ietf-quic-transport"></xref>.</t>

        <section title="Initial Connectivity">
          <t>The base protocol is specified in <xref
          target="I-D.ietf-quic-transport"></xref>. This provides an
          acknowledged PL. A sender can therefore enter the BASE state as soon
          as connectivity has been confirmed.</t>
        </section>

        <section title="Sending QUIC Probe Packets">
          <t>A probe packet consists of a QUIC Header and a payload containing
          PADDING Frames and a PING Frame. PADDING Frames are a single octet
          (0x00) and several of these can be used to create a probe packet of
          size PROBED_SIZE. QUIC provides an acknowledged PL, a sender can
          therefore enter the BASE state as soon as connectivity has been
          confirmed.</t>

          <t>The current specification of QUIC sets the following:<list
              style="symbols">
              <t>BASE_PMTU: 1280. A QUIC sender pads initial packets
              to confirm the path can support packets of
              the required size.</t>

              <t>MIN_PMTU: 1280 bytes. A QUIC sender that determines the PLPMTU
              has fallen below 1280 bytes MUST immediately stop sending on the
              affected path.</t>
            </list></t>
        </section>

        <section title="Validating the Path with QUIC">
          <t>QUIC provides an acknowledged PL. A sender therefore MUST NOT
          implement the CONFIRMATION_TIMER while in the SEARCH_COMPLETE
          state. </t>
        </section>

        <section title="Handling of PTB Messages by QUIC">
          <t>QUIC validates ICMP PTB messages. In addition to UDP Port
          validation, QUIC can validate an ICMP message by using
          other PL information (e.g., validation of connection IDs in the quoted packet of any received ICMP message).</t>
        </section>
      </section>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>This work was partially funded by the European Union's Horizon 2020
      research and innovation programme under grant agreement No. 644334
      (NEAT). The views expressed are solely those of the author(s).</t>

      <t>
      Thanks to all that have commented or contributed, the TSVWG and QUIC
      working groups, and Mathew Calder and Julius Flohr for providing early
      implementations.
      </t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>

      <t>If there are no requirements for IANA, the section will be removed
      during conversion into an RFC by the RFC Editor.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>The security considerations for the use of UDP and SCTP are provided
      in the referenced RFCs.</t>
      
      <t> To avoid excessive load, the interval between individual probe packets
      MUST be at least one RTT, and the interval between rounds of probing is
      determined by the PMTU_RAISE_TIMER. </t>

      <t>A PL sender needs to ensure that the method used to confirm reception
      of probe packets protects from off-path attackers injecting
      packets into the path. This protection if provided in IETF-defined
      protocols (e.g., TCP, SCTP) using a randomly-initialized sequence
      number. A description of one way to do this when using UDP is provided
      in section 5.1 of <xref target="RFC8085"></xref>).</t>

      <t>There are cases where ICMP Packet Too Big (PTB) messages are not
      delivered due to policy, configuration or equipment design (see <xref
      target="Classic-PMTUD"></xref>), this method therefore does not rely
      upon PTB messages being received, but is able to utilize these when they
      are received by the sender. PTB messages could potentially be used to
      cause a node to inappropriately reduce the PLPMTU. A node supporting
      DPLPMTUD MUST therefore appropriately validate the payload of PTB
      messages to ensure these are received in response to transmitted traffic
      (i.e., a reported error condition that corresponds to a datagram
      actually sent by the path layer, see <xref target="PTB"></xref>).</t>

      <t>An on-path attacker, able to create a PTB message could forge PTB
      messages that include a valid quoted IP packet. Such an attack could be
      used to drive down the PLPMTU. There are two ways this method can be
      mitigated against such attacks: First, by ensuring that a PL sender
      never reduces the PLPMTU below the base size, solely in response to
      receiving a PTB message. This is achieved by first entering the BASE
      state when such a message is received. Second, the design does not
      require processing of PTB messages, a PL sender could therefore suspend
      processing of PTB messages (e.g., in a robustness mode after detecting
      that subsequent probes actually confirm that a size larger than the
      PTB_SIZE is supported by a path).</t>
      
      <t>The successful processing of an ICMP message can trigger a probe
      when the reported PTB size is valid, but this does not
      directly update the PLPMTU for the path. This prevents a message
      attempting to black hole data by indicating a size larger than
      supported by the path.</t>

      <t>Parallel forwarding paths SHOULD be considered. <xref
      target="robustness"></xref> identifies the need for robustness in the
      method because the path information might be inconsistent.</t>

      <t>A node performing DPLPMTUD could experience conflicting information
      about the size of supported probe packets. This could occur when there
      are multiple paths are concurrently in use and these exhibit a different
      PMTU. If not considered, this could result in traffic being black holed
      when the PLPMTU is larger than the smallest actual PMTU.</t>
    </section>
  </middle>

  <back>
    <!-- References split into informative and normative -->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->

      &RFC768;

      &RFC791;

      &RFC1191;

      &RFC2119;

      &RFC8200;

      &RFC3828;

      &RFC8085;

      &RFC4820;

      &RFC4960;

      &RFC6951;

      &RFC8174;

      &RFC8201;

      &RFC8261;

      &I-D.ietf-quic-transport;
    </references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->

      &RFC792;

      &RFC1122;

      &RFC1812;

      &RFC4821;

      &RFC2923;

      &RFC4340;

      &RFC4443;

      &RFC4890;

      &RFC5508;

      &I-D.ietf-intarea-tunnels;

      &I-D.ietf-intarea-frag-fragile;

    </references>

    <section title="Revision Notes">
      <t>Note to RFC-Editor: please remove this entire section prior to
      publication.</t>

      <t>Individual draft -00: <list style="symbols">
          <t>Comments and corrections are welcome directly to the authors or
          via the IETF TSVWG working group mailing list.</t>

          <t>This update is proposed for WG comments.</t>
        </list>Individual draft -01:</t>

      <t><list style="symbols">
          <t>Contains the first representation of the algorithm, showing the
          states and timers</t>

          <t>This update is proposed for WG comments.</t>
        </list>Individual draft -02:</t>

      <t><list style="symbols">
          <t>Contains updated representation of the algorithm, and textual
          corrections.</t>

          <t>The text describing when to set the effective PMTU has not yet
          been validated by the authors</t>

          <t>To determine security to off-path-attacks: We need to decide
          whether a received PTB message SHOULD/MUST be validated? The text on
          how to handle a PTB message indicating a link MTU larger than the
          probe has yet not been validated by the authors</t>

          <t>No text currently describes how to handle inconsistent results
          from arbitrary re-routing along different parallel paths</t>

          <t>This update is proposed for WG comments.</t>
        </list>Working Group draft -00:</t>

      <t><list style="symbols">
          <t>This draft follows a successful adoption call for TSVWG</t>

          <t>There is still work to complete, please comment on this
          draft.</t>
        </list>Working Group draft -01:</t>

      <t><list style="symbols">
          <t>This draft includes improved introduction.</t>

          <t>The draft is updated to require ICMP validation prior to
          accepting PTB messages - this to be confirmed by WG</t>

          <t>Section added to discuss Selection of Probe Size - methods to be
          evaluated and recommendations to be considered</t>

          <t>Section added to align with work proposed in the QUIC WG.</t>
        </list>Working Group draft -02:</t>

      <t><list style="symbols">
          <t>The draft was updated based on feedback from the WG, and a
          detailed review by Magnus Westerlund.</t>

          <t>The document updates RFC 4821.</t>

          <t>Requirements list updated.</t>

          <t>Added more explicit discussion of a simpler black-hole detection
          mode.</t>

          <t>This draft includes reorganisation of the section on IETF
          protocols.</t>

          <t>Added more discussion of implementation within an
          application.</t>

          <t>Added text on flapping paths.</t>

          <t>Replaced 'effective MTU' with new term PLPMTU.</t>
        </list></t>

      <t>Working Group draft -03:</t>

      <t><list style="symbols">
          <t>Updated figures</t>

          <t>Added more discussion on blackhole detection</t>

          <t>Added figure describing just blackhole detection</t>

          <t>Added figure relating MPS sizes</t>
        </list></t>

      <t>Working Group draft -04:</t>

      <t><list style="symbols">
          <t>Described phases and named these consistently.</t>

          <t>Corrected transition from confirmation directly to the search
          phase (Base has been checked).</t>

          <t>Redrawn state diagrams.</t>

          <t>Renamed BASE_MTU to BASE_PMTU (because it is a base for the
          PMTU).</t>

          <t>Clarified Error state.</t>

          <t>Clarified suspending DPLPMTUD.</t>

          <t>Verified normative text in requirements section.</t>

          <t>Removed duplicate text.</t>

          <t>Changed all text to refer to /packet probe/probe packet/
          /validation/verification/ added term /Probe Confirmation/ and
          clarified BlackHole detection.</t>
        </list></t>

      <t>Working Group draft -05:</t>

      <t><list style="symbols">
          <t>Updated security considerations.</t>

          <t>Feedback after speaking with Joe Touch helped improve UDP-Options
          description.</t>
        </list></t>

      <t>Working Group draft -06:</t>

      <t><list style="symbols">
          <t>Updated description of ICMP issues in section 1.1</t>

          <t>Update to description of QUIC.</t>
        </list>Working group draft -07:</t>

      <t><list style="symbols">
          <t>Moved description of the PTB processing method from the PTB
          requirements section.</t>

          <t>Clarified what is performed in the PTB validation check.</t>

          <t>Updated security consideration to explain PTB security without
          needing to read the rest of the document.</t>

          <t>Reformatted state machine diagram</t>
        </list>Working group draft -08:</t>

      <t><list style="symbols">
          <t>Moved to rfcxml v3+</t>

          <t>Rendered diagrams to svg in html version.</t>

          <t>Removed Appendix A. Event-driven state changes.</t>

          <t>Removed section on DPLPMTUD with UDP Options.</t>

          <t>Shortened the description of phases.</t>
        </list>
      Working group draft -09:</t>

      <t><list style="symbols">
          <t>Remove final mention of UDP Options</t>

          <t>Add Initial Connectivity sections to each PL</t>

	  <t>Add to disable outgoing pmtu enforcement of packets</t>
        </list>Working group draft -10:</t>
      <t><list style="symbols">
          <t>Address comments from Lars Eggert</t>

          <t>Reinforce that PROBE_COUNT is successive attempts to probe for any size</t>

	  <t>Redefine MAx_PROBES to 3 </t>

	  <t>Address PTB_SIZE of 0 or less that MIN_PMTU</t>
        </list>Working group draft -11:</t>
      <t><list style="symbols">
          <t>Restore a sentence removed in previous rev</t>

          <t>De-acronymise QUIC</t>

          <t>Address some nits</t>
        </list>Working group draft -12:</t>
      <t><list style="symbols">
          <t>Add TSVWG, QUIC and implementers to acknowledgements</t>

	  <t>Shorten a diagram line.</t>

	  <t>Address nits from Julius and Wes.</t>

	  <t>Be clearer when talking about IP layer caches </t>
      </list></t>
<!--      
      <t> Working group draft -11: Working Group draft revised after WGLC:</t>
      <list style="symbols">
        <t>WG comments addresssed</t>
<t> Clarifies how this interacts with CC and Flow Control.</t>
        <t>AD comments addressed</t>

        <t> Working group draft -12 after WGLC:</t>

        <t>Repositioned with respect to PLPMTUD requirements, now all stated here.</t>
         <t>Updates UDP Guidelines.</t>
         <t>Updates SCTP to replace ref to PLPMTUD (RFC4960).</t>

	 <t> Requirements ammended following comments; Updates SCTP to align
	 with RFC4960 on retransmit; clarification of MPS handling;
	 Clarification of flight size v. cwnd wrt QUIC; updated black hole
	 detection diagram and text; Added text on SCTP counters; Fixed other
	 minor issues; clarified PL segmentation v. IP fragmentation.  
	 </t>

      </list></t>
-->
    </section>
  </back>
</rfc>
